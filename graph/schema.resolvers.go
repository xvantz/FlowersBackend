package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"fmt"
	"milena/graph/model"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreateWork(ctx context.Context, input model.NewWork) (*model.Work, error) {
	work := model.Work{
		Name:        input.Name,
		Section:     input.Section,
		Description: input.Description,
		Image:       input.Image,
	}

	err := r.DB.Select("name", "section", "description", "image").Create(&work).Error
	if err != nil {
		return nil, fmt.Errorf("error inserting new post: %v", err)
	}

	return &work, nil
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model.Post, error) {
	post := model.Post{
		Name:        input.Name,
		Author:      input.Author,
		Description: input.Description,
		Section:     input.Section,
	}

	err := r.DB.Select("name", "author", "Description", "Section").Create(&post).Error
	if err != nil {
		return nil, fmt.Errorf("error inserting new project: %v", err)
	}

	return &post, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	var posts []*model.Post

	err := r.DB.Find(&posts).Error
	if err != nil {
		return nil, err
	}

	return posts, nil
}

// Works is the resolver for the works field.
func (r *queryResolver) Works(ctx context.Context) ([]*model.Work, error) {
	var works []*model.Work

	err := r.DB.Find(&works).Error
	if err != nil {
		return nil, err
	}

	return works, nil
}

// LastPosts is the resolver for the lastPosts field.
func (r *queryResolver) LastPosts(ctx context.Context, limit *int) ([]*model.Post, error) {
	var posts []*model.Post

	err := r.DB.Order("id DESC").Limit(2).Find(&posts).Error
	if err != nil {
		return nil, err
	}

	return posts, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
